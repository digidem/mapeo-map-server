// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator erd {
  provider = "prisma-erd-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model TileData {
  tileHash  String
  tilesetId String
  data      Bytes
  tile      Tile[]

  @@id([tileHash, tilesetId])
}

model Tile {
  etag      String?
  quadKey   String
  tileData  TileData @relation(fields: [tileHash, tilesetId], references: [tileHash, tilesetId], onUpdate: Cascade)
  tileHash  String
  tileset   Tileset  @relation(fields: [tilesetId], references: [id], onUpdate: Cascade)
  tilesetId String

  @@id([quadKey, tilesetId])
}

model Tileset {
  id               String  @id
  // Description of tileset based on TileJSON spec
  tilejson         String
  format           String
  // Array of urls pulled from tilejson
  upstreamTileUrls String?
  etag             String?
  upstreamUrl      String?
  tiles            Tile[]
}

model Style {
  id                  String        @id
  // JSON string that adheres to style specification v8
  stylejson           String
  etag                String?
  upstreamUrl         String?
  spriteId            String?
  // JSON object that maps the source ids to their respective tileset ids
  sourceIdToTilesetId String
  offlineAreas        OfflineArea[]
}

model Sprite {
  id           String
  // PNG with all images used in a style
  data         Bytes
  // JSON string describing positions of sprite in data
  layout       String
  pixelDensity Int
  etag         String?
  upstreamUrl  String?

  @@id([id, pixelDensity])
}

model Glyph {
  fontName    String
  // e.g.: 0, 1, 2, ...  (Multiply by 256 for lower bound, add 256 for upper)
  rangeId     Int
  data        Bytes
  etag        String?
  upstreamUrl String?

  @@id([fontName, rangeId])
}

model OfflineArea {
  id          String   @id
  zoomLevel   Int
  boundingBox String // Comma-separated string of 4 floats
  name        String
  style       Style    @relation(fields: [styleId], references: [id])
  styleId     String
  imports     Import[]
}

model Import {
  id                String      @id
  importedResources Int
  totalResources    Int
  importedBytes     Int?
  totalBytes        Int?
  isComplete        Boolean // When downloaded = total
  started           DateTime    @default(now())
  finished          DateTime?
  tilesetId         String?
  importType        String // 'tileset' | 'style_resources' (stylejson, glyphs, sprites)
  offlineArea       OfflineArea @relation(fields: [areaId], references: [id], onUpdate: Cascade)
  areaId            String      @unique
}
